type Approve = record {
  fee : E8s;
  from : vec nat8;
  allowance_e8s : int64;
  allowance : E8s;
  expected_allowance : opt E8s;
  expires_at : opt Timestamp;
  spender : vec nat8;
};
type Burn = record { from : vec nat8; amount : E8s; spender : opt vec nat8 };
type E8s = record { e8s : nat64 };
type Error = record { message : text };
type Mint = record { to : vec nat8; amount : E8s };
type Operation = variant {
  Approve : Approve;
  Burn : Burn;
  Mint : Mint;
  Transfer : Transfer;
};
type Result = variant { Ok : text; Err : Error };
type Result_1 = variant { Ok : vec opt StoredTransactions; Err : Error };
type Result_2 = variant { Ok : nat64; Err : Error };
type StoredTransactions = record {
  memo : nat64;
  icrc1_memo : opt vec nat8;
  operation : opt Operation;
  index : nat64;
  created_at_time : Timestamp;
};
type Timestamp = record { timestamp_nanos : nat64 };
type Transfer = record {
  to : vec nat8;
  fee : E8s;
  from : vec nat8;
  amount : E8s;
  spender : opt vec nat8;
};
service : (nat64, nat32, text, text) -> {
  add_subaccount : () -> (text);
  canister_status : () -> (Result) query;
  clear_transactions : (opt nat64, opt nat64, opt Timestamp) -> (Result_1);
  get_interval : () -> (Result_2) query;
  get_next_block : () -> (nat64) query;
  get_nonce : () -> (nat32) query;
  get_oldest_block : () -> (opt nat64) query;
  get_subaccount_count : () -> (nat32) query;
  get_subaccountid : (nat32) -> (Result) query;
  get_transactions_count : () -> (nat32) query;
  list_transactions : (opt nat64) -> (vec opt StoredTransactions) query;
  refund : (text, text) -> (Result);
  set_interval : (nat64) -> (Result_2);
  set_next_block : (nat64) -> ();
  sweep_user_vault : (text) -> (Result);
  test_hashing : (nat32) -> (text) query;
}
