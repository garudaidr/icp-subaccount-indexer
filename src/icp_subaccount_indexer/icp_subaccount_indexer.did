type Approve = record {
  fee : E8s;
  from : blob;
  allowance_e8s : int64;
  allowance : E8s;
  expected_allowance : opt E8s;
  expires_at : opt Timestamp;
  spender : blob;
};
type Burn = record { from : blob; amount : E8s; spender : opt blob };
type E8s = record { e8s : nat64 };
type Error = record { message : text };
type HttpHeader = record { value : text; name : text };
type HttpResponse = record {
  status : nat;
  body : blob;
  headers : vec HttpHeader;
};
type Mint = record { to : blob; amount : E8s };
type Network = variant { Mainnet; Local };
type Operation = variant {
  Approve : Approve;
  Burn : Burn;
  Mint : Mint;
  Transfer : Transfer;
};
type Result = variant { Ok : text; Err : Error };
type Result_1 = variant { Ok : text; Err : text };
type Result_10 = variant { Ok : vec StoredTransactionsV2; Err : text };
type Result_11 = variant { Ok; Err : Error };
type Result_12 = variant { Ok : nat64; Err : Error };
type Result_13 = variant { Ok : vec text; Err : Error };
type Result_14 = variant { Ok : bool; Err : Error };
type Result_2 = variant { Ok : vec StoredTransactionsV2; Err : Error };
type Result_3 = variant { Ok : vec record { TokenType; nat64 }; Err : text };
type Result_4 = variant { Ok : nat64; Err : text };
type Result_5 = variant { Ok : Network; Err : text };
type Result_6 = variant { Ok : nat32; Err : text };
type Result_7 = variant { Ok : opt nat64; Err : text };
type Result_8 = variant { Ok : vec record { TokenType; text }; Err : text };
type Result_9 = variant { Ok : TokenType; Err : text };
type StoredTransactionsV2 = record {
  sweep_status : SweepStatus;
  memo : nat64;
  token_ledger_canister_id : opt principal;
  icrc1_memo : opt blob;
  operation : opt Operation;
  index : nat64;
  created_at_time : Timestamp;
  tx_hash : text;
  token_type : TokenType;
};
type SweepStatus = variant { Swept; FailedToSweep; NotSwept };
type Timestamp = record { timestamp_nanos : nat64 };
type TokenType = variant { ICP; CKUSDC; CKUSDT; CKBTC };
type Transfer = record {
  to : blob;
  fee : E8s;
  from : blob;
  amount : E8s;
  spender : opt blob;
};
type TransformArgs = record { context : blob; response : HttpResponse };
service : (Network, nat64, nat32, text, text) -> {
  add_subaccount : (opt TokenType) -> (Result);
  canister_status : () -> (Result_1) query;
  clear_transactions : (opt nat64, opt Timestamp) -> (Result_2);
  convert_to_icrc_account : (text) -> (Result) query;
  get_all_token_blocks : () -> (Result_3) query;
  get_canister_principal : () -> (Result_1) query;
  get_icrc_account : (nat32) -> (Result) query;
  get_interval : () -> (Result_4) query;
  get_network : () -> (Result_5) query;
  get_next_block : () -> (Result_4) query;
  get_nonce : () -> (Result_6) query;
  get_oldest_block : () -> (Result_7) query;
  get_registered_tokens : () -> (Result_8) query;
  get_subaccount_count : () -> (Result_6) query;
  get_subaccountid : (nat32, opt TokenType) -> (Result) query;
  get_token_next_block_query : (TokenType) -> (Result_4) query;
  get_transaction_token_type : (text) -> (Result_9) query;
  get_transactions_count : () -> (Result_6) query;
  get_webhook_url : () -> (Result_1) query;
  list_transactions : (opt nat64) -> (Result_10) query;
  refund : (nat64) -> (Result);
  register_token : (TokenType, text) -> (Result_11);
  reset_token_blocks : () -> (Result);
  set_custodian_principal : (text) -> (Result);
  set_interval : (nat64) -> (Result_12);
  set_next_block : (nat64) -> (Result_12);
  set_sweep_failed : (text) -> (Result_13);
  set_token_next_block_update : (TokenType, nat64) -> (Result_12);
  set_webhook_url : (text) -> (Result);
  single_sweep : (text) -> (Result_13);
  sweep : () -> (Result_13);
  sweep_by_token_type : (TokenType) -> (Result_13);
  sweep_subaccount : (text, float64, opt TokenType) -> (Result_12);
  transform : (TransformArgs) -> (HttpResponse) query;
  validate_icrc_account : (text) -> (Result_14) query;
}
