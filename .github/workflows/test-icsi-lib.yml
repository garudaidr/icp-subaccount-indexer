name: Test ICSI Library

on:
  push:
    branches: [main, develop]
    paths:
      - "packages/icsi-lib/**"
      - "src/icp_subaccount_indexer/**"
      - ".github/workflows/test-icsi-lib.yml"
  pull_request:
    branches: [main, develop]
    paths:
      - "packages/icsi-lib/**"
      - "src/icp_subaccount_indexer/**"
      - ".github/workflows/test-icsi-lib.yml"

env:
  RUST_VERSION: 1.82.0
  NODE_VERSION: 20

jobs:
  test-icsi-lib:
    name: Test ICSI Library
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Set up Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          target: wasm32-unknown-unknown
          components: rustfmt, clippy

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.2 # matches packageManager in package.json
          standalone: true # ensures the exact pnpm is used
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install candid-extractor
        run: |
          cargo install candid-extractor
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Build canister
        run: |
          pnpm run build:canister

      - name: Lint and format check
        run: |
          cd packages/icsi-lib
          pnpm run format

          # Check if there are any uncommitted changes after formatting
          if [ -n "$(git status --porcelain)" ]; then
            echo "❌ Code is not properly formatted. Please run 'pnpm run format' and commit the changes."
            git diff
            exit 1
          fi

      - name: Run TypeScript type checking
        run: |
          cd packages/icsi-lib
          pnpm run build

      - name: Run unit tests
        run: |
          cd packages/icsi-lib
          pnpm run test:unit || {
            echo "❌ Unit tests failed"
            exit 1
          }
