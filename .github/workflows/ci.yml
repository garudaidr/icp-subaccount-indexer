name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.2 # matches packageManager in package.json
          standalone: true # ensures the exact pnpm is used
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
          cache-dependency-path: "pnpm-lock.yaml"

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run TypeScript format check
        run: cd packages/icsi-lib && pnpm run format:check

      - name: Run type check
        run: pnpm run type-check

      - name: Run unit tests
        run: cd packages/icsi-lib && pnpm run test:unit

  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: test-unit

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.82.0
          override: true
          components: rustfmt, clippy

      - name: Add wasm32 target
        run: rustup target add wasm32-unknown-unknown

      - name: Run Rust format check
        run: cargo fmt --all -- --check

      - name: Run Rust clippy
        run: cargo clippy -- -D warnings

      - name: Run Rust tests
        run: cargo test

  build-canister:
    name: Build Canister
    runs-on: ubuntu-latest
    needs: test-backend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
          cache-dependency-path: "pnpm-lock.yaml"

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.82.0
          override: true

      - name: Add wasm32 target
        run: rustup target add wasm32-unknown-unknown

      - name: Install candid-extractor
        run: |
          cargo install candid-extractor
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Verify tool installations
        run: |
          echo "Checking tool availability..."
          which candid-extractor || echo "candid-extractor not found in PATH"
          candid-extractor --version || echo "candid-extractor not working"

      - name: Install dependencies
        run: pnpm install

      - name: Build canister
        run: pnpm run build:canister

  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "pnpm"
          cache-dependency-path: "pnpm-lock.yaml"

      - name: Install dependencies
        run: pnpm install

      - name: Check TypeScript/JavaScript formatting
        run: cd packages/icsi-lib && pnpm run format:check

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.82.0
          override: true
          components: rustfmt

      - name: Check Rust formatting
        run: cargo fmt --all -- --check

  integration-test-summary:
    name: Integration Test Summary
    runs-on: ubuntu-latest
    needs: [test-unit, test-backend, build-canister, lint-and-format]
    if: always()

    steps:
      - name: Check test results
        run: |
          echo "Unit Tests: ${{ needs.test-unit.result }}"
          echo "Backend Tests: ${{ needs.test-backend.result }}"
          echo "Build: ${{ needs.build-canister.result }}"
          echo "Lint and Format: ${{ needs.lint-and-format.result }}"

          # Fail if any critical tests failed
          if [[ "${{ needs.test-unit.result }}" == "failure" || 
                "${{ needs.test-backend.result }}" == "failure" || 
                "${{ needs.build-canister.result }}" == "failure" ]]; then
            echo "Critical tests failed!"
            exit 1
          fi


          if [[ "${{ needs.lint-and-format.result }}" == "failure" ]]; then
            echo "⚠️ Lint/format checks failed - code style issues detected"
          fi

          echo "✅ Integration test pipeline completed"
